#! /usr/bin/env python3
import sys
import time
import pensel_utils as pu

if sys.version_info.major == 2:
    input = raw_input  # noqa


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Print recorded input data from pensel recordings.')
    parser.add_argument('playback_file', type=str,
                        help='File to play back.')
    parser.add_argument('--parsed', default=False, action="store_true",
                        help='Whether or not we should print a parsed version of the report')
    parser.add_argument('--raw', default=False, action="store_true",
                        help='Whether or not we should print a raw version of the report. '
                        'If --parsed isn\'t specified, this is True by default.')
    parser.add_argument("--reports", nargs='*', type=str,
                        help="reports to stream (filter out ones we don't care about)")
    parser.add_argument('--verbose', default=False, action="store_true",
                        help='Whether or not we should print extra debug information')

    args = parser.parse_args()

    if args.reports is None:
        reports_to_stream = []
    else:
        reports_to_stream = [int(r, 16) for r in args.reports]

    with pu.PenselPlayback(args.playback_file, args.verbose) as pi:
        time.sleep(0.1)  # let queue fill up a bit
        while pi.packets_available():
            try:
                pkt = pi.get_packet()
                if pkt:
                    report, retval, payload = pkt
                    if len(reports_to_stream) == 0 or report in reports_to_stream:
                        if retval == 0:
                            if args.parsed:
                                pi.parse_report(report, payload)
                            if not args.parsed or args.raw:
                                print(pkt)
                        else:
                            print("ERROR: report {} returned retval {}".format(report, retval))
                    elif args.verbose:
                        print("Ignoring report ID {}".format(report))
            except KeyboardInterrupt:
                break
        else:
            print("Out of packets!")
